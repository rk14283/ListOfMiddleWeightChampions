<select>
  <option>select a champion</option>
  <% for (boxerName of boxerNames){ %>
  <option><%=boxerName.name%></option>
  <% } %>
</select>

<button>BOX</button>
<select>
  <option>select a champion</option>
  <% for (boxerName of boxerNames){ %>
  <option><%=boxerName.name%></option>
  <% } %>
</select>

version 2: Drop down list 

<label for="champion-one">Select a champion:</label>
<input list="list-of-champions" id="champion-one" name="champion-one" />

<button>BOX</button>
<label for="champion-two">Select a champion:</label>
<input list="list-of-champions" id="champion-two" name="champion-two" />
<datalist id="list-of-champions">
  <% for (boxerName of boxerNames){ %>

  <option data-value="<%=boxerName.id%>"><%=boxerName.name%></option>
  <% } %>
</datalist>

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>List Of Middleweight Champions</title>
  </head>
  <body>
    <label id="get-label">
      select a boxer
      <select id="filters">
        <% for (boxerName of boxerNames){ %>
        <option value="<%=boxerName.id%>"><%=boxerName.name%></option>
        <% } %>
      </select>
      <br />
    </label>
    <img src="" id="boxerOne" />

    <label id="get-labelTwo">
      select an opponent
      <select id="opponents">
        <% for (boxerName of boxerNames){ %>
        <option value="<%=boxerName.id%>"><%=boxerName.name%></option>
        <% } %>
      </select>
    </label>
    <img src="" id="opponentPicture" />
    <a href="" id="boxerIDs"><button id="box">Box</button></a>
  </body>

  <script>
    const label = document.getElementById("get-label");
    const opponenetLabel = document.getElementById("get-labelTwo");
    const boxButton = document.getElementById("box");
    // console.log("fight!", boxButton);

    label.onchange = () => displayImage("filters", "boxerOne");
    opponenetLabel.onchange = () =>
      displayImage("opponents", "opponentPicture");

    async function displayImage(dropDownId, imageId) {
      const dropdown = document.getElementById(dropDownId);

      let boxerId = parseInt(dropdown.value);

      const response = await fetch(
        `http://localhost:9000/api/boxers/${boxerId}/json`
      );

      const json = await response.json();
      const imageElement = document.getElementById(imageId);
      imageElement.src = "https://" + json.imageURL;
    }
    boxButton.onclick = async function () {
      //console.log("I was clicked");

      const mainBoxerDropdown = document.getElementById("filters");
      let mainBoxerId = parseInt(mainBoxerDropdown.value);

      //console.log(mainBoxerId);
      const opponentBoxerDropdown = document.getElementById("opponents");
      let opponentBoxerId = parseInt(opponentBoxerDropdown.value);

      //console.log(opponentBoxerId);
      let url = `/api/simulatefight/:${mainBoxerId}/:${opponentBoxerId}`;

      document.getElementById("boxerIDs").href = url;
      //console.log(url);
    };
  </script>
</html>

app.get("/api/simulatefight/:id1/:id2", async (request, response) => {
  //right now I need to log both the ids
  let mainBoxerId = request.params.id1;
  let opponentBoxerId = request.params.id2;

  console.log(mainBoxerId);
  console.log(opponentBoxerId);
});

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>List Of Middleweight Champions</title>
  </head>
  <body>
    <label id="get-label">
      select a boxer
      <select id="filters">
        <% for (boxerName of boxerNames){ %>
        <option value="<%=boxerName.id%>"><%=boxerName.name%></option>
        <% } %>
      </select>
      <br />
    </label>
    <img src="" id="boxerOne" />

    <label id="get-labelTwo">
      select an opponent
      <select id="opponents">
        <% for (boxerName of boxerNames){ %>
        <option value="<%=boxerName.id%>"><%=boxerName.name%></option>
        <% } %>
      </select>
    </label>
    <img src="" id="opponentPicture" />
    <button id="box">Box</button>
  </body>

  <script>
    const label = document.getElementById("get-label");
    const opponenetLabel = document.getElementById("get-labelTwo");
    const boxButton = document.getElementById("box");
    // console.log("fight!", boxButton);

    label.onchange = () => displayImage("filters", "boxerOne");
    opponenetLabel.onchange = () =>
      displayImage("opponents", "opponentPicture");

    async function displayImage(dropDownId, imageId) {
      const dropdown = document.getElementById(dropDownId);

      let boxerId = parseInt(dropdown.value);

      const response = await fetch(
        `http://localhost:9000/api/boxers/${boxerId}/json`
      );

      const json = await response.json();
      const imageElement = document.getElementById(imageId);
      imageElement.src = "https://" + json.imageURL;
    }
    boxButton.onclick = async function () {
      //console.log("I was clicked");

      const mainBoxerDropdown = document.getElementById("filters");
      let mainBoxerId = parseInt(mainBoxerDropdown.value);

      //console.log(mainBoxerId);
      const opponentBoxerDropdown = document.getElementById("opponents");
      let opponentBoxerId = parseInt(opponentBoxerDropdown.value);

      //console.log(opponentBoxerId);
      let url = `/api/simulatefight/${mainBoxerId}/${opponentBoxerId}`;

      const newResponse = await fetch(
        `/api/simulatefight/${mainBoxerId}/${opponentBoxerId}`
      );
      //console.log(url);
    };
  </script>
</html>


var express = require("express");
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();
var bodyParser = require("body-parser");
var cors = require("cors");
var path = require("path");
var app = express();
app.use(bodyParser.json());

//var expressLayouts = require("express-ejs-layouts");
app.use(express.urlencoded({ extended: true }));

app.use(cors());
//app.use(expressLayouts);
//provides the engine
app.set("view engine", "ejs");
//provides the directory
app.set("views", path.join(__dirname, "./views"));
//console.log(__dirname);

app.get("/boxers", async (request, response) => {
  const boxerNames = await prisma.boxer.findMany({
    where: {
      formerChampion: true,
    },
    select: {
      name: true,
      id: true,
    },
  });

  response.render("templates", { boxerNames: boxerNames });
});

app.get("/", async (request, response) => {
  const boxerNames = await prisma.boxer.findMany({
    where: {
      formerChampion: true,
    },
    select: {
      name: true,
      id: true,
    },
  });
  //console.log(boxerNames);
  response.render("templates", { boxerNames: boxerNames });
});

app.get("/api/simulatefight/:id1/:id2", async (request, response) => {
  //right now I need to log both the ids
  //: is when you are defining parameters, but do not put colon in templates
  let mainBoxerId = parseInt(request.params.id1);
  let opponentBoxerId = parseInt(request.params.id2);

  //console.log(mainBoxerId);
  //console.log(opponentBoxerId);
  //query how many champions boxer 1 beat
  let mainBoxerData = await prisma.boxer.findUnique({
    where: {
      id: mainBoxerId,
    },
  });
  // console.log(mainBoxerData);
  let mainBoxerName = mainBoxerData.name;
  //console.log("This is my name", mainBoxerName);
  let mainBoxerRecordById = await prisma.boxer.findUnique({
    where: {
      id: mainBoxerId,
    },
    include: {
      fightsWon: {
        where: {
          boxers: {
            every: {
              formerChampion: true,
            },
          },
        },
      },
    },
  });
  // console.log(mainBoxerRecordById);
  let championsBeatenByMainBoxer = mainBoxerRecordById.fightsWon.length;
  //console.log("This is how many champions sugar ray beat",championsBeatenByMainBoxer)
  //query how many champions boxer 2 beat
  let opponentBoxerData = await prisma.boxer.findUnique({
    where: {
      id: opponentBoxerId,
    },
  });
  //console.log(opponentBoxerData);
  let opponentBoxerName = opponentBoxerData.name;
  //console.log("This is my name", opponentBoxerName);
  let opponentBoxerRecordById = await prisma.boxer.findUnique({
    where: {
      id: opponentBoxerId,
    },
    include: {
      fightsWon: {
        where: {
          boxers: {
            every: {
              formerChampion: true,
            },
          },
        },
      },
    },
  });
  //  console.log(opponentBoxerRecordById);
  let championsBeatenByOpponentBoxer = opponentBoxerRecordById.fightsWon.length;
  //console.log("This is how many champions tommy beat",championsBeatenByOpponentBoxer)
  //compute the difference
  //based on who has higher champions beaten either id 1 won, id2 won or it was a draw

  if (championsBeatenByMainBoxer > championsBeatenByOpponentBoxer) {
    console.log(mainBoxerName + " " + "won");
  } else if (championsBeatenByMainBoxer < championsBeatenByOpponentBoxer) {
    console.log(opponentBoxerName + " " + "won");
  } else {
    console.log("It is a draw");
  }
  //send response to front end who won
  //show who won in front end in some way
});

app.get("/api/boxers/:id/json", async (request, response) => {
  // console.log("these are params", request.params.id);

  let boxerId = parseInt(request.params.id);

  //console.log("this is boxer id", boxerId);

  let oneBoxerInfo = await prisma.boxer.findUnique({
    where: {
      id: boxerId,
    },
  });

  response.send(oneBoxerInfo);
});

app.listen(9000, function () {
  console.log("heard on 9000");
});


<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>List Of Middleweight Champions</title>
  </head>
  <body>
    <label id="get-label">
      select a boxer
      <select id="filters">
        <% for (boxerName of boxerNames){ %>
        <option value="<%=boxerName.id%>"><%=boxerName.name%></option>
        <% } %>
      </select>
      <br />
    </label>
    <img src="" id="boxerOne" />

    <label id="get-labelTwo">
      select an opponent
      <select id="opponents">
        <% for (boxerName of boxerNames){ %>
        <option value="<%=boxerName.id%>"><%=boxerName.name%></option>
        <% } %>
      </select>
    </label>
    <img src="" id="opponentPicture" />
    <button id="box">Box</button>
    <h3 style="color: crimson" id="winnerIs"></h3>
  </body>

  <script>
    const label = document.getElementById("get-label");
    const opponenetLabel = document.getElementById("get-labelTwo");
    const boxButton = document.getElementById("box");
    // console.log("fight!", boxButton);

    label.onchange = () => displayImage("filters", "boxerOne");
    opponenetLabel.onchange = () =>
      displayImage("opponents", "opponentPicture");

    async function displayImage(dropDownId, imageId) {
      const dropdown = document.getElementById(dropDownId);

      let boxerId = parseInt(dropdown.value);

      const response = await fetch(
        `http://localhost:9000/api/boxers/${boxerId}/json`
      );

      const json = await response.json();
      const imageElement = document.getElementById(imageId);
      imageElement.src = "https://" + json.imageURL;
    }
    boxButton.onclick = async function () {
      //console.log("I was clicked");

      const mainBoxerDropdown = document.getElementById("filters");
      let mainBoxerId = parseInt(mainBoxerDropdown.value);

      //console.log(mainBoxerId);
      const opponentBoxerDropdown = document.getElementById("opponents");
      let opponentBoxerId = parseInt(opponentBoxerDropdown.value);

      //console.log(opponentBoxerId);
      let url = `/api/simulatefight/${mainBoxerId}/${opponentBoxerId}`;

      const newResponse = await fetch(
        `/api/simulatefight/${mainBoxerId}/${opponentBoxerId}`
      );
      //console.log(url);
      const winnerResponse = await fetch(
        `/api/simulatefight/${mainBoxerId}/${opponentBoxerId}`
      );

      let winnerText = await winnerResponse.text();
      //console.log(winnerText);
      winnerIs.innerText = winnerText;
    };
  </script>
</html>

 /*background: crimson;*/
    /*
    grid-row-start: 1;
    grid-column-start: 1;
    grid-row-end: 3;
    grid-column-end: 3;
    */
    /*shortened version of above*/
    /*grid-area: 1/1/3/3;*/
    /*name refffering to is the starting line*/
    /*grid-area: 3 / col1-left/2/2;*/
    /*grid-area: 2/2;*/
    /*span rows then columns*/
    /*grid-area: 3/1 / span 2 / span 2;*/




