<!DOCTYPE html>
<style>
  html,
  body {
    height: 100%;
    width: 100%;
  }

  body {
    background-color: skyblue;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 40px;
  }

  #container {
    display: flex;
    justify-content: center;
    flex-direction: row;

    align-items: center;
    gap: 20px;
    font-size: 25px;
  }
  .pageheading {
    font-size: 40px;
    text-align: center;
  }
  select {
    display: block;
    width: 100%;
    text-align: center;
    margin-top: 15px;
  }
  h3 {
    font-size: 40px;
  }

  .boxerCard {
    width: 40vw;
    max-width: 450px;
  }
  .boxerImageContainer {
    /*this is 100% of the direct parent*/
    width: 100%;
  }
  .boxerImage {
    background: lightpink;

    height: 40vw;
    border-radius: 50%;
    border-style: solid;
    object-fit: cover;
    width: 100%;
    max-height: 450px;
  }

  #boxerOne {
    border-color: red;
  }

  #opponentPicture {
    border-color: blue;
  }

  #box {
    display: block;
    background-color: orange;

    height: 16px;
    padding: 16px 60px;
  }
  .dropdown {
    font-size: 16px;
    padding: 8px;
  }
  .dropdown-label {
    font-size: 16px;
    padding: 8px;
    text-align: center;
    display: block;
  }

  @media screen and (min-width: 768px) {
    .dropdown {
      font-size: 24px;
      padding: 8px;
    }
    .pageheading {
      font-size: 60px;
      margin: 40px 0;
    }

    .dropdown-label {
      font-size: 24px;
    }
    #box {
      font-size: 24px;
    }
  }
  @media screen and (min-width: 798px) {
    #box {
      display: block;
      background-color: orange;

      height: 50px;
    }
  }
</style>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title>List Of Middleweight Champions</title>
  </head>

  <body>
    <div class="header">
      <h1 id="body-content" style="color: black" class="pageheading">
        Middleweight Fantasy Matchup
      </h1>
    </div>
    <div id="container">
      <div id="d1" class="boxerCard">
        <div id="imageOne" class="boxerImageContainer">
          <img src="" id="boxerOne" class="boxerImage" />
        </div>

        <label id="get-label" class="dropdown-label">
          Boxer

          <select id="filters" class="dropdown">
            <option disabled selected>-- boxer --</option>
            <% for (boxerName of boxerNames){ %>
            <option value="<%=boxerName.id%>"><%=boxerName.name%></option>
            <% } %>
          </select>
        </label>
      </div>
      <div id="vs"><h2 style="color: black">VS</h2></div>

      <div id="d2" class="boxerCard">
        <div id="imageTwo" class="boxerImageContainer">
          <img src="" id="opponentPicture" class="boxerImage" />
        </div>

        <label id="get-labelTwo" class="dropdown-label">
          Opponent

          <select id="opponents" class="dropdown">
            <option disabled selected>-- boxer --</option>
            <% for (boxerName of boxerNames){ %>
            <option value="<%=boxerName.id%>"><%=boxerName.name%></option>
            <% } %>
          </select>
        </label>
      </div>
    </div>

    <button id="box">Box</button>

    <h3 style="color: rgb(255, 77, 0)" id="winnerIs"></h3>
    <h3 style="color: rgb(255, 0, 149)" id="times"></h3>
    <h3 style="color: rgb(68, 0, 255)" id="details"></h3>
  </body>

  <script>
    const label = document.getElementById("get-label");

    const opponenetLabel = document.getElementById("get-labelTwo");
    const boxButton = document.getElementById("box");
    let mainBoxerName = document.getElementById("filters");
    let opponentBoxerName = document.getElementById("opponents");
    let mainBoxerText = null;
    let opponentBoxerText = null;

    function findSelectedBoxerName(dropdown) {
      var length = dropdown.children.length;

      for (var i = 0; i < length; i++) {
        if (dropdown.children[i].selected) {
          return dropdown.children[i].text;
        }
      }
    }
    mainBoxerName.onchange = function () {
      mainBoxerText = findSelectedBoxerName(mainBoxerName);
    };

    opponentBoxerName.onchange = function () {
      opponentBoxerText = findSelectedBoxerName(opponentBoxerName);
    };

    label.onchange = () => displayImage("filters", "boxerOne");
    opponenetLabel.onchange = () =>
      displayImage("opponents", "opponentPicture");

    async function displayImage(dropDownId, imageId) {
      document.getElementById("imageOne").style.background = null;
      document.getElementById("imageTwo").style.background = null;
      const dropdown = document.getElementById(dropDownId);
      //document.getElementById("winnerIs") = null
      winnerIs.innerText = " ";
      times.innerText = " ";
      details.innerText = " ";

      let boxerId = dropdown.value;

      const response = await fetch(`/api/boxers/${boxerId}/json`);

      const json = await response.json();
      const imageElement = document.getElementById(imageId);
      imageElement.src = "https://" + json.imageURL;
      if (json.imageURL === null) {
        imageElement.src =
          "https://c7.alamy.com/comp/FCF9TM/3d-render-of-a-boxer-holding-a-question-mark-symbol-FCF9TM.jpg";
      }
    }
    boxButton.onclick = async function () {
      let mainBoxerId = getBoxerId("filters");

      let opponentBoxerId = getBoxerId("opponents");

      const winnerResponse = await fetch(
        `/api/simulatefight/${mainBoxerId}/${opponentBoxerId}`
      );
      const numberInRealLife = await fetch(
        `/api/simulatefight/${mainBoxerId}/${opponentBoxerId}/realLife`
      );
      //console.log(numberInRealLife)
      var result = [];
      /* for (var i of numberInRealLife) {
        result.push([i, numberInRealLife]);
      } */
      //console.log(typeof numberInRealLife);
      let jsonFought = await numberInRealLife.json();
      let timesFought = jsonFought.length;
      let reMatchIds = [];

      //console.log(jsonFought[1]);
      let winsByMainBoxer = [];
      let winsByOpponentBoxer = [];
      let drawArray = [];

      //filter the number of times mainBoxerID appears
      for (fought of jsonFought) {
        //console.log(fought);
        reMatchIds.push(fought);
      }
      let countWinsMainBoxer = 0;
      let countWinsOpponentBoxer = 0;
      let countDraws = 0;
      for (var i = 0; i < reMatchIds.length; i++) {
        if (reMatchIds[i] === mainBoxerId) {
          //console.log("false");
          winsByMainBoxer.push(reMatchIds[i]);
          countWinsMainBoxer = winsByMainBoxer.length;
          //console.log(countWinsMainBoxer);
        } else if (reMatchIds[i] === opponentBoxerId) {
          winsByOpponentBoxer.push(reMatchIds[i]);
          //console.log(winsByOpponentBoxer);
          countWinsOpponentBoxer = winsByOpponentBoxer.length;
        } else {
          drawArray.push(reMatchIds[i]);
          //console.log(drawArray);
          countDraws = drawArray.length;
          //console.log(countDraws);
        }
      }

      let winnerText = await winnerResponse.text();

      winnerIs.innerText = winnerText;
      if (timesFought === 1) {
        times.innerText = `${mainBoxerText} & ${opponentBoxerText} fought once in real life`;
        //But that is only possible if main boxer won, not possible if it was a draw
        if (countWinsMainBoxer > 0) {
          details.innerText = `${mainBoxerText} won`;
          //console.log(winnerText);
        } else if (countWinsOpponentBoxer > 0) {
          details.innerText = `${opponentBoxerText} won`;
        } else if (countDraws === 0) {
          details.innerText = "It was a draw";
        }
      } else if (timesFought > 1) {
        times.innerText = `${mainBoxerText} & ${opponentBoxerText} fought ${timesFought} times in real life`;
        details.innerText = `${countWinsMainBoxer} wins for ${mainBoxerText}  and ${countWinsOpponentBoxer} win(s) for ${opponentBoxerText} and ${countDraws} draw(s)`;
      }

      if (winnerText === mainBoxerText) {
        displayOutcome("green", "red", winnerText + " " + "won");
      } else if (winnerText === opponentBoxerText) {
        displayOutcome("red", "green", winnerText + " " + "won");
      } else {
        displayOutcome("yellow", "yellow", "it's a draw");
      }
    };

    function displayOutcome(colorOne, colorTwo, outcomeText) {
      document.getElementById("imageOne").style.background = colorOne;
      document.getElementById("imageTwo").style.background = colorTwo;
      winnerIs.innerText = outcomeText;
    }

    function getBoxerId(dropDownId) {
      const dropdown = document.getElementById(dropDownId);

      let boxerId = dropdown.value;

      return boxerId;
    }
  </script>
</html>
